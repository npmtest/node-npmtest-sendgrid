{"/home/travis/build/npmtest/node-npmtest-sendgrid/test.js":"/* istanbul instrument in package npmtest_sendgrid */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sendgrid/lib.npmtest_sendgrid.js":"/* istanbul instrument in package npmtest_sendgrid */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sendgrid = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sendgrid = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sendgrid/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sendgrid && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sendgrid */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sendgrid\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sendgrid.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sendgrid.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sendgrid.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sendgrid.__dirname + '/lib.npmtest_sendgrid.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sendgrid/node_modules/sendgrid/index.js":"exports = module.exports = require('./lib/sendgrid');\nexports.mail = require('./lib/helpers/mail/mail.js');\nexports.importer = require('./lib/helpers/contact-importer/contact-importer.js');\nexports.parse = require('./lib/helpers/inbound/parse.js');\n","/home/travis/build/npmtest/node-npmtest-sendgrid/node_modules/sendgrid/lib/sendgrid.js":"/* eslint dot-notation: 'off' */\n'use strict';\n\n/**\n * Dependencies\n */\nvar pkg = require('./../package.json');\nvar sendgridRest = require('sendgrid-rest');\nvar emptyRequest = sendgridRest.emptyRequest;\nvar Client = sendgridRest.Client;\nvar SendGridError = require('./helpers/error');\n\n/**\n * Helper to check if response is valid\n */\nfunction isValidResponse(response) {\n  return (\n    response &&\n    response.statusCode &&\n    response.statusCode >= 200 &&\n    response.statusCode <= 299\n  );\n}\n\n/**\n * Helper to get a new empty request\n */\nfunction getEmptyRequest(data) {\n  var request = JSON.parse(JSON.stringify(emptyRequest));\n  if (data && typeof data === 'object') {\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        request[key] = JSON.parse(JSON.stringify(data[key]));\n      }\n    }\n  }\n  return request;\n}\n\n/**\n * Helper to make headers\n */\nfunction makeHeaders(apiKey, globalHeaders) {\n  var headers = {};\n  headers['Authorization'] = 'Bearer '.concat(apiKey);\n  headers['Accept'] = 'application/json';\n  headers['User-Agent'] = 'sendgrid/' + pkg.version + ';nodejs';\n  if (globalHeaders) {\n    for (var obj in globalHeaders) {\n      if (globalHeaders.hasOwnProperty(obj) &&\n        typeof globalHeaders[obj] === 'object') {\n        for (var key in globalHeaders[obj]) {\n          if (globalHeaders[obj].hasOwnProperty(key)) {\n            headers[key] = globalHeaders[obj][key];\n          }\n        }\n      }\n    }\n  }\n  return headers;\n}\n\n/**\n * SendGrid allows for quick and easy access to the v3 Web API\n */\nfunction SendGrid(apiKey, host, globalHeaders) {\n  return new SendGridInstance(apiKey, host, globalHeaders);\n}\n\n/**\n * SendGrid allows for quick and easy access to the v3 Web API\n */\nfunction SendGridInstance(apiKey, host, globalHeaders) {\n  //Create global request\n  this.globalRequest = getEmptyRequest({\n    host: host || 'api.sendgrid.com',\n    headers: makeHeaders(apiKey, globalHeaders),\n  });\n\n  //Initialize new client\n  this.client = new Client(this.globalRequest);\n}\n\n//Interact with the API with this function\nSendGridInstance.prototype.API = function(request, callback) {\n  var self = this;\n\n  //If no callback provided, we will return a promise\n  if (!callback) {\n    if (!SendGrid.Promise) {\n      throw new SendGridError('Promise API not supported');\n    }\n    return new SendGrid.Promise(function(resolve, reject) {\n      self.client.API(request, function(response) {\n        try {\n          response.body = response.body ? JSON.parse(response.body) : response.body;\n        } catch (e) {\n          return reject(e)\n        }\n        if (isValidResponse(response)) {\n          resolve(response);\n        }\n        else {\n          var error = new SendGridError('Response error');\n          error.response = response;\n          reject(error);\n        }\n      });\n    });\n  }\n\n  //Use callback\n  self.client.API(request, function(response) {\n    try {\n      response.body = response.body ? JSON.parse(response.body) : response.body;\n    } catch (e) {\n      return callback(e)\n    }\n    if (isValidResponse(response)) {\n      callback(null, response);\n    }\n    else {\n      var error = new SendGridError('Response error');\n      error.response = response;\n      callback(error, response);\n    }\n  });\n};\n\n//Set requests\nSendGridInstance.prototype.emptyRequest = getEmptyRequest;\n\n//Try to use native promises by default\nif (typeof Promise !== 'undefined') {\n  SendGrid.Promise = Promise;\n}\nelse {\n  SendGrid.Promise = null;\n}\n\n//Export\nmodule.exports = SendGrid;\n","/home/travis/build/npmtest/node-npmtest-sendgrid/node_modules/sendgrid-rest/lib/client.js":"'use strict'\n\nvar https = require('https')\nvar http = require('http')\nvar queryString = require('querystring')\n\n// request holds the request to an API Call\nvar request = {\n  host: '',\n  method: '',\n  path: '',\n  headers: {},\n  body: {},\n  queryParams: {},\n  test: false, // use this to allow for http calls\n  port: ''     // set the port for http calls\n}\n\nvar emptyRequest = JSON.parse(JSON.stringify(request))\n\n// response holds the response from an API call, use this as an initializer\n// like so: JSON.parse(JSON.stringify(response))\nvar response = {\n  'statusCode': '',\n  'body': {},\n  'headers': {}\n}\n\n// Client allows for quick and easy access any REST or REST-like API.\nfunction Client (globalRequest) {\n  var emptyResponse = JSON.parse(JSON.stringify(response))\n  var body = ''\n\n  // utility function to create an empty request object\n  this.emptyRequest = function () {\n    return JSON.parse(JSON.stringify(request))\n  }\n\n  // utility function to detect empty objects\n  function isEmpty (obj) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  // add query paramaters to a URL\n  function buildPath (basePath, queryParams) {\n    basePath = basePath.concat('?')\n    var url = basePath.concat(queryString.stringify(queryParams))\n    return url\n  }\n\n  function buildRequest (globalRequest, endpointRequest) {\n    var request = JSON.parse(JSON.stringify(globalRequest))\n    request.host = endpointRequest.host || globalRequest.host\n    request.method = endpointRequest.method\n\n    // build URL\n    request.path = !isEmpty(endpointRequest.queryParams)\n      ? buildPath(endpointRequest.path, endpointRequest.queryParams)\n      : endpointRequest.path\n\n    // add headers\n    if (!isEmpty(endpointRequest.headers)) {\n      for (var attrname in endpointRequest.headers) {\n        request.headers[attrname] = endpointRequest.headers[attrname]\n      }\n    }\n\n    // add the request body's content length\n    if (!isEmpty(endpointRequest.body)) {\n      body = JSON.stringify(endpointRequest.body)\n      request.headers['Content-Length'] = Buffer.byteLength(body)\n      request.headers['Content-Type'] = 'application/json'\n    }\n\n    return request\n  }\n\n  // API is the main interface to the API.\n  this.API = function (endpointRequest, callback) {\n    var request = buildRequest(globalRequest, endpointRequest)\n\n    if ( endpointRequest.test == true ) {\n      var http_request = http\n      request.port = endpointRequest.port\n    } else {\n      var http_request = https\n    }\n\n    var httpRequest = http_request.request(request, function (httpResponse) {\n      var responseBody = ''\n\n      // cature the response from the API\n      httpResponse.on('data', function (chunk) {\n        responseBody += chunk\n      })\n\n      // after the call is complete, build the response object\n      httpResponse.on('end', function () {\n        var response = JSON.parse(JSON.stringify(emptyResponse))\n        response.statusCode = httpResponse.statusCode\n        response.body = responseBody\n        response.headers = httpResponse.headers\n        callback(response)\n      })\n    })\n\n    httpRequest.on('error', function (e) {\n      var response = JSON.parse(JSON.stringify(emptyResponse))\n      response.statusCode = e.statusCode || 500\n      response.body = JSON.stringify({\n        message: e.message,\n        name: e.name,\n        stack: e.stack,\n      })\n      callback(response)\n    })\n\n    // if thre is a request body, sent it\n    if (!isEmpty(endpointRequest.body)) {\n      httpRequest.write(body)\n    }\n\n    httpRequest.end()\n  }\n\n  return this\n}\n\nmodule.exports =\n{\n  Client: Client,\n  request: request,\n  emptyRequest: emptyRequest\n}\n","/home/travis/build/npmtest/node-npmtest-sendgrid/node_modules/sendgrid/lib/helpers/error.js":"'use strict';\n\n//Error constructor\nfunction SendGridError(message) {\n  this.message = message;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  }\n  else {\n    this.stack = (new Error()).stack;\n  }\n}\n\n//Extend prototype\nSendGridError.prototype = new Error();\nSendGridError.prototype.constructor = SendGridError;\nSendGridError.prototype.name = 'SendGridError';\n\n//Export\nmodule.exports = SendGridError;\n","/home/travis/build/npmtest/node-npmtest-sendgrid/node_modules/sendgrid/lib/helpers/mail/mail.js":"'use strict';\n// This helper builds the request body for the v3 mail/send endpoint\n// Please see examples/helpers/mail/example.js for an usage example\n\nfunction ClickTracking(enable, enable_text) {\n  this.enable = enable;\n  this.enable_text = enable_text;\n\n  this.setEnable = function(enable) {\n    this.enable = enable;\n  };\n\n  this.getEnable = function() {\n    return this.enable;\n  };\n\n  this.setEnableText = function(enable_text) {\n    this.enable_text = enable_text;\n  };\n\n  this.getEnableText = function() {\n    return this.enable_text;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      enable: this.getEnable(),\n      enable_text: this.getEnableText(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction OpenTracking(enable, substitution_tag) {\n  this.enable = enable;\n  this.substitution_tag = substitution_tag;\n\n  this.setEnable = function(enable) {\n    this.enable = enable;\n  };\n\n  this.getEnable = function() {\n    return this.enable;\n  };\n\n  this.setSubscriptionTag = function(substitution_tag) {\n    this.substitution_tag = substitution_tag;\n  };\n\n  this.getSubscriptionTag = function() {\n    return this.substitution_tag;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      enable: this.getEnable(),\n      substitution_tag: this.getSubscriptionTag(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction SubscriptionTracking(enable, text, html, substitution_tag) {\n  this.enable = enable;\n  this.text = text;\n  this.html = html;\n  this.substitution_tag = substitution_tag;\n\n  this.setEnable = function(enable) {\n    this.enable = enable;\n  };\n\n  this.getEnable = function() {\n    return this.enable;\n  };\n\n  this.setText = function(text) {\n    this.text = text;\n  };\n\n  this.getText = function() {\n    return this.text;\n  };\n\n  this.setHtml = function(html) {\n    this.html = html;\n  };\n\n  this.getHtml = function() {\n    return this.html;\n  };\n\n  this.setSubstitutionTag = function(substitution_tag) {\n    this.substitution_tag = substitution_tag;\n  };\n\n  this.getSubstitutionTag = function() {\n    return this.substitution_tag;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      enable: this.getEnable(),\n      text: this.getText(),\n      html: this.getHtml(),\n      substitution_tag: this.getSubstitutionTag(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction Ganalytics(\n  enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign\n) {\n  this.enable = enable;\n  this.utm_source = utm_source;\n  this.utm_medium = utm_medium;\n  this.utm_term = utm_term;\n  this.utm_content = utm_content;\n  this.utm_campaign = utm_campaign;\n\n  this.setEnable = function(enable) {\n    this.enable = enable;\n  };\n\n  this.getEnable = function() {\n    return this.enable;\n  };\n\n  this.setUtmSource = function(utm_source) {\n    this.utm_source = utm_source;\n  };\n\n  this.getUtmSource = function() {\n    return this.utm_source;\n  };\n\n  this.setUtmMedium = function(utm_medium) {\n    this.utm_medium = utm_medium;\n  };\n\n  this.getUtmMedium = function() {\n    return this.utm_medium;\n  };\n\n  this.setUtmTerm = function(utm_term) {\n    this.utm_term = utm_term;\n  };\n\n  this.getUtmTerm = function() {\n    return this.utm_term;\n  };\n\n  this.setUtmContent = function(utm_content) {\n    this.utm_content = utm_content;\n  };\n\n  this.getUtmContent = function() {\n    return this.utm_content;\n  };\n\n  this.setUtmCampaign = function(utm_campaign) {\n    this.utm_campaign = utm_campaign;\n  };\n\n  this.getUtmCampaign = function() {\n    return this.utm_campaign;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      enable: this.getEnable(),\n      utm_source: this.getUtmSource(),\n      utm_medium: this.getUtmMedium(),\n      utm_term: this.getUtmTerm(),\n      utm_content: this.getUtmContent(),\n      utm_campaign: this.getUtmCampaign(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction TrackingSettings() {\n  this.click_tracking = undefined;\n  this.open_tracking = undefined;\n  this.subscription_tracking = undefined;\n  this.ganalytics = undefined;\n\n  this.setClickTracking = function(click_tracking) {\n    this.click_tracking = click_tracking;\n  };\n\n  this.getClickTracking = function() {\n    return this.click_tracking;\n  };\n\n  this.setOpenTracking = function(open_tracking) {\n    this.open_tracking = open_tracking;\n  };\n\n  this.getOpenTracking = function() {\n    return this.open_tracking;\n  };\n\n  this.setSubscriptionTracking = function(subscription_tracking) {\n    this.subscription_tracking = subscription_tracking;\n  };\n\n  this.getSubscriptionTracking = function() {\n    return this.subscription_tracking;\n  };\n\n  this.setGanalytics = function(ganalytics) {\n    this.ganalytics = ganalytics;\n  };\n\n  this.getGanalytics = function() {\n    return this.ganalytics;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      click_tracking: this.getClickTracking(),\n      open_tracking: this.getOpenTracking(),\n      subscription_tracking: this.getSubscriptionTracking(),\n      ganalytics: this.getGanalytics(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction Bcc(enable, email) {\n  this.enable = enable;\n  this.email = email;\n\n  this.setEnable = function(enable) {\n    this.enable = enable;\n  };\n\n  this.getEnable = function() {\n    return this.enable;\n  };\n\n  this.setEmail = function(email) {\n    this.email = email;\n  };\n\n  this.getEmail = function() {\n    return this.email;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      enable: this.getEnable(),\n      email: this.getEmail(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction BypassListManagement(enable) {\n  this.enable = enable;\n\n  var json = {\n    enable: this.enable,\n  };\n\n  return json;\n}\n\nfunction Footer(enable, text, html) {\n  this.enable = enable;\n  this.text = text;\n  this.html = html;\n\n  this.setEnable = function(enable) {\n    this.enable = enable;\n  };\n\n  this.getEnable = function() {\n    return this.enable;\n  };\n\n  this.setText = function(text) {\n    this.text = text;\n  };\n\n  this.getText = function() {\n    return this.text;\n  };\n\n  this.setHtml = function(html) {\n    this.html = html;\n  };\n\n  this.getHtml = function() {\n    return this.html;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      enable: this.getEnable(),\n      text: this.getText(),\n      html: this.getHtml(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction SandBoxMode(enable) {\n  this.enable = enable;\n\n  var json = {\n    enable: this.enable,\n  };\n\n  return json;\n}\n\nfunction SpamCheck(enable, threshold, post_to_url) {\n  this.enable = enable;\n  this.threshold = threshold;\n  this.post_to_url = post_to_url;\n\n  this.setEnable = function(enable) {\n    this.enable = enable;\n  };\n\n  this.getEnable = function() {\n    return this.enable;\n  };\n\n  this.setThreshold = function(threshold) {\n    this.threshold = threshold;\n  };\n\n  this.getThreshold = function() {\n    return this.threshold;\n  };\n\n  this.setPostToUrl = function(post_to_url) {\n    this.post_to_url = post_to_url;\n  };\n\n  this.getPostToUrl = function() {\n    return this.post_to_url;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      enable: this.getEnable(),\n      threshold: this.getThreshold(),\n      post_to_url: this.getPostToUrl(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction MailSettings() {\n  this.bcc = undefined;\n  this.bypass_list_management = undefined;\n  this.footer = undefined;\n  this.sandbox_mode = undefined;\n  this.spam_check = undefined;\n\n  this.setBcc = function(bcc) {\n    this.bcc = bcc;\n  };\n\n  this.getBcc = function() {\n    return this.bcc;\n  };\n\n  this.setBypassListManagement = function(bypass_list_management) {\n    this.bypass_list_management = bypass_list_management;\n  };\n\n  this.getBypassListManagement = function() {\n    return this.bypass_list_management;\n  };\n\n  this.setFooter = function(footer) {\n    this.footer = footer;\n  };\n\n  this.getFooter = function() {\n    return this.footer;\n  };\n\n  this.setSandBoxMode = function(sandbox_mode) {\n    this.sandbox_mode = sandbox_mode;\n  };\n\n  this.getSandBoxMode = function() {\n    return this.sandbox_mode;\n  };\n\n  this.setSpamCheck = function(spam_check) {\n    this.spam_check = spam_check;\n  };\n\n  this.getSpamCheck = function() {\n    return this.spam_check;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      bcc: this.getBcc(),\n      bypass_list_management: this.getBypassListManagement(),\n      footer: this.getFooter(),\n      sandbox_mode: this.getSandBoxMode(),\n      spam_check: this.getSpamCheck(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction Attachment() {\n  this.content = undefined;\n  this.type = undefined;\n  this.filename = undefined;\n  this.disposition = undefined;\n  this.content_id = undefined;\n\n  this.setContent = function(content) {\n    this.content = content;\n  };\n\n  this.getContent = function() {\n    return this.content;\n  };\n\n  this.setType = function(type) {\n    this.type = type;\n  };\n\n  this.getType = function() {\n    return this.type;\n  };\n\n  this.setFilename = function(filename) {\n    this.filename = filename;\n  };\n\n  this.getFilename = function() {\n    return this.filename;\n  };\n\n  this.setDisposition = function(disposition) {\n    this.disposition = disposition;\n  };\n\n  this.getDisposition = function() {\n    return this.disposition;\n  };\n\n  this.setContentId = function(content_id) {\n    this.content_id = content_id;\n  };\n\n  this.getContentId = function() {\n    return this.content_id;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      content: this.getContent(),\n      type: this.getType(),\n      filename: this.getFilename(),\n      disposition: this.getDisposition(),\n      content_id: this.getContentId(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction Asm(group_id, groups_to_display) {\n  this.group_id = group_id;\n  this.groups_to_display = groups_to_display;\n\n  var json = {\n    group_id: this.group_id,\n    groups_to_display: this.groups_to_display,\n  };\n\n  return json;\n}\n\nfunction Category(name) {\n  this.category = name;\n\n  var json = {\n    category: this.category,\n  };\n\n  return json;\n}\n\nfunction CustomArgs(key, value) {\n  this.key = key;\n  this.value = value;\n\n  var json = {};\n  json[this.key] = this.value;\n\n  return json;\n}\n\nfunction Substitution(key, value) {\n  this.key = key;\n  this.value = value;\n\n  var json = {};\n  json[this.key] = this.value;\n\n  return json;\n}\n\nfunction Section(key, value) {\n  this.key = key;\n  this.value = value;\n\n  var json = {};\n  json[this.key] = this.value;\n\n  return json;\n}\n\nfunction Header(key, value) {\n  this.key = key;\n  this.value = value;\n\n  var json = {};\n  json[this.key] = this.value;\n\n  return json;\n}\n\nfunction Personalization() {\n  this.tos = undefined;\n  this.ccs = undefined;\n  this.bccs = undefined;\n  this.subject = undefined;\n  this.headers = undefined;\n  this.substitutions = undefined;\n  this.custom_args = undefined;\n  this.send_at = undefined;\n\n  this.addTo = function(email) {\n    if (this.tos === undefined) {\n      this.tos = [];\n    }\n    this.tos.push(email);\n  };\n\n  this.getTos = function() {\n    return this.tos;\n  };\n\n  this.addCc = function(email) {\n    if (this.ccs === undefined) {\n      this.ccs = [];\n    }\n    this.ccs.push(email);\n  };\n\n  this.getCcs = function() {\n    return this.ccs;\n  };\n\n  this.addBcc = function(email) {\n    if (this.bccs === undefined) {\n      this.bccs = [];\n    }\n    this.bccs.push(email);\n  };\n\n  this.getBccs = function() {\n    return this.bccs;\n  };\n\n  this.setSubject = function(subject) {\n    this.subject = subject;\n  };\n\n  this.getSubject = function() {\n    return this.subject;\n  };\n\n  this.addHeader = function(header) {\n    if (this.headers === undefined) {\n      this.headers = {};\n    }\n    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];\n  };\n\n  this.getHeaders = function() {\n    return this.headers;\n  };\n\n  this.addSubstitution = function(substitution) {\n    if (this.substitutions === undefined) {\n      this.substitutions = {};\n    }\n    this.substitutions[Object.keys(substitution)[0]] =\n      substitution[Object.keys(substitution)[0]];\n  };\n\n  this.getSubstitutions = function() {\n    return this.substitutions;\n  };\n\n  this.addCustomArg = function(custom_arg) {\n    if (this.custom_args === undefined) {\n      this.custom_args = {};\n    }\n    this.custom_args[Object.keys(custom_arg)[0]] =\n      custom_arg[Object.keys(custom_arg)[0]];\n  };\n\n  this.getCustomArgs = function() {\n    return this.custom_args;\n  };\n\n  this.setSendAt = function(send_at) {\n    this.send_at = send_at;\n  };\n\n  this.getSendAt = function() {\n    return this.send_at;\n  };\n\n  this.toJSON = function() {\n    var json = {\n      to: this.getTos(),\n      cc: this.getCcs(),\n      bcc: this.getBccs(),\n      subject: this.getSubject(),\n      headers: this.getHeaders(),\n      substitutions: this.getSubstitutions(),\n      custom_args: this.getCustomArgs(),\n      send_at: this.getSendAt(),\n    };\n    return json;\n  };\n\n  return this;\n}\n\nfunction Content(type, value) {\n  this.type = type;\n  this.value = value;\n\n  var json = {\n    type: this.type,\n    value: this.value,\n  };\n\n  return json;\n}\n\nfunction Email(email, name) {\n  this.name = name;\n  this.email = email;\n\n  var json = {\n    email: this.email,\n    name: this.name,\n  };\n\n  return json;\n}\n\n// This represents the full request body for a v3 /mail/send/\nfunction Mail(from_email, subject, to_email, content) {\n  this.from_email = undefined;\n  this.personalizations = undefined;\n  this.subject = undefined;\n  this.contents = undefined;\n  this.attachments = undefined;\n  this.template_id = undefined;\n  this.sections = undefined;\n  this.headers = undefined;\n  this.categories = undefined;\n  this.send_at = undefined;\n  this.batch_id = undefined;\n  this.asm = undefined;\n  this.ip_pool_name = undefined;\n  this.mail_settings = undefined;\n  this.reply_to = undefined;\n\n  this.setFrom = function(email) {\n    this.from_email = email;\n  };\n\n  this.getFrom = function() {\n    return this.from_email;\n  };\n\n  this.addPersonalization = function(personalization) {\n    if (this.personalizations === undefined) {\n      this.personalizations = [];\n    }\n    this.personalizations.push(personalization);\n  };\n\n  this.getPersonalizations = function() {\n    return this.personalizations;\n  };\n\n  this.setSubject = function(subject) {\n    this.subject = subject;\n  };\n\n  this.getSubject = function() {\n    return this.subject;\n  };\n\n  this.addContent = function(content) {\n    if (this.contents === undefined) {\n      this.contents = [];\n    }\n    this.contents.push(content);\n  };\n\n  this.getContents = function() {\n    return this.contents;\n  };\n\n  this.addAttachment = function(attachment) {\n    if (this.attachments === undefined) {\n      this.attachments = [];\n    }\n    this.attachments.push(attachment);\n  };\n\n  this.getAttachments = function() {\n    return this.attachments;\n  };\n\n  this.setTemplateId = function(template_id) {\n    this.template_id = template_id;\n  };\n\n  this.getTemplateId = function() {\n    return this.template_id;\n  };\n\n  this.addSection = function(section) {\n    if (this.sections === undefined) {\n      this.sections = {};\n    }\n    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]];\n  };\n\n  this.getSections = function() {\n    return this.sections;\n  };\n\n  this.addHeader = function(header) {\n    if (this.headers === undefined) {\n      this.headers = {};\n    }\n    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];\n  };\n\n  this.getHeaders = function() {\n    return this.headers;\n  };\n\n  this.addCategory = function(category) {\n    if (this.categories === undefined) {\n      this.categories = [];\n    }\n    this.categories.push(category.category);\n  };\n\n  this.getCategories = function() {\n    return this.categories;\n  };\n\n  this.addCustomArg = function(custom_arg) {\n    if (this.custom_args === undefined) {\n      this.custom_args = {};\n    }\n    this.custom_args[Object.keys(custom_arg)[0]] =\n      custom_arg[Object.keys(custom_arg)[0]];\n  };\n\n  this.getCustomArgs = function() {\n    return this.custom_args;\n  };\n\n  this.setSendAt = function(send_at) {\n    this.send_at = send_at;\n  };\n\n  this.getSendAt = function() {\n    return this.send_at;\n  };\n\n  this.setBatchId = function(batch_id) {\n    this.batch_id = batch_id;\n  };\n\n  this.getBatchId = function() {\n    return this.batch_id;\n  };\n\n  this.setAsm = function(asm) {\n    this.asm = asm;\n  };\n\n  this.getAsm = function() {\n    return this.asm;\n  };\n\n  this.setIpPoolName = function(ip_pool_name) {\n    this.ip_pool_name = ip_pool_name;\n  };\n\n  this.getIpPoolName = function() {\n    return this.ip_pool_name;\n  };\n\n  this.addMailSettings = function(mail_settings) {\n    this.mail_settings = mail_settings;\n  };\n\n  this.getMailSettings = function() {\n    return this.mail_settings;\n  };\n\n  this.addTrackingSettings = function(tracking_settings) {\n    this.tracking_settings = tracking_settings;\n  };\n\n  this.getTrackingSettings = function() {\n    return this.tracking_settings;\n  };\n\n  this.setReplyTo = function(reply_to) {\n    this.reply_to = reply_to;\n  };\n\n  this.getReplyTo = function() {\n    return this.reply_to;\n  };\n\n  if (from_email && subject && to_email && content) {\n    this.setFrom(from_email);\n    var personalization = new Personalization();\n    personalization.addTo(to_email);\n    this.addPersonalization(personalization);\n    this.setSubject(subject);\n    this.addContent(content);\n  }\n\n  this.toJSON = function() {\n    var json = {\n      from: this.getFrom(),\n      personalizations: this.getPersonalizations(),\n      subject: this.getSubject(),\n      content: this.getContents(),\n      attachments: this.getAttachments(),\n      template_id: this.getTemplateId(),\n      sections: this.getSections(),\n      headers: this.getHeaders(),\n      categories: this.getCategories(),\n      custom_args: this.getCustomArgs(),\n      send_at: this.getSendAt(),\n      batch_id: this.getBatchId(),\n      asm: this.getAsm(),\n      ip_pool_name: this.getIpPoolName(),\n      mail_settings: this.getMailSettings(),\n      tracking_settings: this.getTrackingSettings(),\n      reply_to: this.getReplyTo(),\n    };\n\n    return json;\n  };\n\n  return this;\n}\n\nmodule.exports = {\n  Email: Email,\n  Mail: Mail,\n  Personalization: Personalization,\n  Content: Content,\n  Header: Header,\n  Substitution: Substitution,\n  CustomArgs: CustomArgs,\n  Attachment: Attachment,\n  Section: Section,\n  Category: Category,\n  Asm: Asm,\n  Bcc: Bcc,\n  BypassListManagement: BypassListManagement,\n  Footer: Footer,\n  SandBoxMode: SandBoxMode,\n  SpamCheck: SpamCheck,\n  MailSettings: MailSettings,\n  ClickTracking: ClickTracking,\n  OpenTracking: OpenTracking,\n  SubscriptionTracking: SubscriptionTracking,\n  Ganalytics: Ganalytics,\n  TrackingSettings: TrackingSettings,\n};\n","/home/travis/build/npmtest/node-npmtest-sendgrid/node_modules/sendgrid/lib/helpers/contact-importer/contact-importer.js":"/* eslint dot-notation: 'off' */\n'use strict';\n\nvar Bottleneck = require('bottleneck');\nvar EventEmitter = require('events').EventEmitter;\nvar chunk = require('lodash.chunk');\nvar debug = require('debug')('sendgrid');\nvar util = require('util');\nvar queue = require('async.queue');\nvar ensureAsync = require('async.ensureasync');\n\nvar ContactImporter = module.exports = function(sg, options) {\n  options = options || {};\n  var self = this;\n  this.sg = sg;\n  this.pendingItems = [];\n\n  // Number of items to send per batch.\n  this.batchSize = options.batchSize || 1500;\n\n  // Max number of requests per rate limit period.\n  this.rateLimitLimit = options.rateLimitLimit || 3;\n\n  // Length of rate limit period (miliseconds).\n  this.rateLimitPeriod = options.rateLimitPeriod || 2000;\n\n  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.\n  this.throttle = new Bottleneck(0, 0);\n  this.throttle.changeReservoir(this.rateLimitLimit);\n\n  // Create a queue that wil be used to send batches to the throttler.\n  this.queue = queue(ensureAsync(this._worker));\n\n  // When the last batch is removed from the queue, add any incomplete batches.\n  this.queue.empty = function() {\n    if (self.pendingItems.length) {\n      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);\n      var batch = self.pendingItems.splice(0);\n      self.queue.push({\n        data: batch,\n        owner: self,\n      }, function(error, result) {\n        if (error) {\n          return self._notify(error, JSON.parse(error.response.body), batch);\n        }\n        return self._notify(null, JSON.parse(result.body), batch);\n      });\n    }\n  };\n\n  // Emit an event when the queue is drained.\n  this.queue.drain = function() {\n    self.emit('drain');\n  };\n};\nutil.inherits(ContactImporter, EventEmitter);\n\n/**\n *  Add a new contact, or an array of contact, to the end of the queue.\n *\n * @param {Array|Object} data A contact or array of contacts.\n */\nContactImporter.prototype.push = function(data) {\n  var self = this;\n  data = Array.isArray(data) ? data : [data];\n\n  // Add the new items onto the pending items.\n  var itemsToProcess = this.pendingItems.concat(data);\n\n  // Chunk the pending items into batches and add onto the queue\n  var batches = chunk(itemsToProcess, this.batchSize);\n  debug('generated batches %s from %s items', batches.length, data.length);\n\n  batches.forEach(function(batch) {\n    // If this batch is full or the queue is empty queue it for processing.\n    if (batch.length === self.batchSize || !self.queue.length()) {\n      self.queue.push({\n        data: batch,\n        owner: self,\n      }, function(error, result) {\n        if (error) {\n          return self._notify(error, JSON.parse(error.response.body), batch);\n        }\n        return self._notify(null, JSON.parse(result.body), batch);\n      });\n    }\n    // Otherwise, it store it for later.\n    else {\n      debug('the last batch with only %s item is deferred (partial batch)', batch.length);\n      self.pendingItems = batch;\n    }\n  });\n\n  debug('batches in queue: %s', this.queue.length());\n  debug('items in deferred queue: %s', this.pendingItems.length);\n};\n\n/**\n * Send a batch of contacts to Sendgrid.\n *\n * @param {Object} task Task to be processed (data in 'data' property)\n * @param {Function} callback Callback function.\n */\nContactImporter.prototype._worker = function(task, callback) {\n  var context = task.owner;\n  debug('processing batch (%s items)', task.data.length);\n  context.throttle.submit(context._sendBatch, context, task.data, callback);\n};\n\nContactImporter.prototype._sendBatch = function(context, data, callback) {\n  debug('sending batch (%s items)', data.length);\n\n  var request = context.sg.emptyRequest();\n  request.method = 'POST';\n  request.path = '/v3/contactdb/recipients';\n  request.body = data;\n\n  context.sg.API(request)\n    .then(function(response) {\n      debug('got response: %o', response);\n      setTimeout(function() {\n        context.throttle.incrementReservoir(1);\n      }, context.rateLimitPeriod);\n      return callback(null, response);\n    })\n    .catch(function(error) {\n      debug('got error, %o', error);\n      setTimeout(function() {\n        context.throttle.incrementReservoir(1);\n      }, context.rateLimitPeriod);\n      return callback(error);\n    });\n};\n\n/**\n * Emit the result of processing a batch.\n *\n * @param {Object} error\n * @param {Object} result\n */\nContactImporter.prototype._notify = function(error, result, batch) {\n  if (error) {\n    return this.emit('error', error, batch);\n  }\n  return this.emit('success', result, batch);\n};\n","/home/travis/build/npmtest/node-npmtest-sendgrid/node_modules/sendgrid/lib/helpers/inbound/parse.js":"'use strict';\n\nvar fs = require('fs');\nvar MailParser = require('mailparser').MailParser;\nvar Attachment = require('../mail/mail.js').Attachment;\n\n/**\n * Normalises attachment files retrieved from file system or parsed raw email\n *\n * @param {Object} file The file object returned by file system or parsed email\n * @return {Object} A SendGrid Attachment object with the file data\n */\nfunction createAttachment(file) {\n  var attachment = new Attachment();\n\n  attachment.setFilename(file.originalname || file.fileName);\n  attachment.setType(file.mimetype || file.contentType);\n  attachment.setContent(file.content.toString('base64'));\n\n  return attachment;\n}\n\n/**\n * Simple class that parses data received from SendGrid Inbound Parse Webhook\n *\n * @constructor\n * @param {Object} config inbound configuration object\n * @param {Object} request request object of the parse webhook payload\n */\nfunction Parse(config, request) {\n  this.keys = config.keys;\n  this.request = request;\n  this.payload = request.body || {};\n  this.files = request.files || [];\n}\n\n/**\n * Return an object literal of key/values in the payload received from webhook\n * @return {Object} Valid key/values in the webhook payload\n */\nParse.prototype.keyValues = function() {\n  var keyValues = {};\n  var key;\n\n  for (var index in this.keys) {\n    key = this.keys[index];\n\n    if (this.payload[key]) {\n      keyValues[key] = this.payload[key];\n    }\n  }\n\n  return keyValues;\n};\n\n/**\n * Whether the payload contains the raw email (Only applies to raw payloads)\n * @return {Boolean}\n */\nParse.prototype.hasRawEmail = function() {\n  return Boolean(this.payload.email);\n};\n\n/**\n * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)\n * @param {Function} callback Function which will receive the parsed email object as the sole argument\n */\nParse.prototype.getRawEmail = function(callback) {\n  var mailparser = new MailParser();\n  var rawEmail = this.payload.email;\n\n  if (!rawEmail) {\n    return callback(null);\n  }\n\n  mailparser.on('end', callback);\n\n  mailparser.write(rawEmail);\n  mailparser.end();\n};\n\n/**\n * Retrieves all attachments received from the webhook payload\n * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument\n */\nParse.prototype.attachments = function(callback) {\n  if (this.hasRawEmail()) {\n    return this._getAttachmentsRaw(callback);\n  }\n\n  this._getAttachments(callback);\n};\n\n/**\n * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)\n * @private\n * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument\n */\nParse.prototype._getAttachmentsRaw = function(callback) {\n  this.getRawEmail(function(parsedEmail) {\n    if (!parsedEmail || !parsedEmail.attachments) {\n      return callback([]);\n    }\n\n    var attachments = parsedEmail.attachments.map(function(file) {\n      return createAttachment(file);\n    });\n\n    callback(attachments);\n  });\n};\n\n/**\n * Retrieves webhook payload files from the file system (Only applies to non raw payloads)\n * @private\n * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument\n */\nParse.prototype._getAttachments = function(callback) {\n  var file;\n  var attachments = [];\n\n  for (var index in this.files) {\n    file = this.files[index];\n\n    if (fs.existsSync(file.path)) {\n      file.content = fs.readFileSync(file.path);\n      attachments.push(createAttachment(file));\n    }\n  }\n\n  return callback(attachments);\n};\n\nmodule.exports = Parse;\n"}